<div class="ui middle aligned center aligned">
    <div class="area">
    <div id="drop_zone">Drop your secret file here</div>
    </div>
    <div>Share with:</div>
    <select name="keys" id="keys" multiple class="ui fluid search dropdown">
    <% keys.each do |key| %>
      <option value="<%= key %>"><%= key %></option>
    <% end %>
    </select>
    <div id="diag"></div>
</div>

<script>
  function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer.files; // FileList object.

    var reader = new FileReader();
    reader.onload = function(e) {
      if(files.length != 1) {
          alert("Sorry, you cannot upload more than one file.");
      }
      else {
        expire_passphrase();
        passphrase_struct = get_passphrase_struct();
        if(passphrase_struct == null) {
          alert("Sorry, your passphrase expired.");
        }
        else {
          var file_name = files[0].name;
          display_diag("Encrypting your secret...", true);

          // For each recipient selected, retrieve their public key and encrypt
          var encrypt_for_identity = function(identity, counter) {
            return function() {
              display_diag("Encrypting for " + identity + "...", false);
              var defer = $.Deferred();
              $.ajax({
                type: "POST",
                url: "/getkey.json",
                data: { id: identity },
                success: function(gpg_key) {

                  kbpgp.KeyManager.import_from_armored_pgp({
                    armored: gpg_key,
                  }, function(err, person) {
                    if(!err) {
                      var params = {
                        msg: reader.result,
                        encrypt_for: person
                      };
                      // result_string is cleartext
                      // result_buffer is binary data
                      kbpgp.box(params, function(err, result_string, result_buffer) {
                        $.ajax({
                          type: "POST",
                          url: "/pushfile.json",
                          data: { recipient: identity, name: file_name, content: encodeURIComponent(result_string) },
                          success: function( data ) {
                            display_diag("done.", true);
                            if(counter < 1)
                              display_diag("Done.");
                            defer.resolve();
                          }
                        });
                      });
                    }
                    else console.log(err);
                  });

                }
              })
              return defer.promise();
            }
          }

          var identities = $('#keys :selected'), counter = identities.length;
          var chain = $.when({});
          $.each(identities, function(index, identity) {
            chain = chain.then(encrypt_for_identity($(identity).text(), --counter));
          });

        }
      }
    }
    reader.readAsBinaryString(files[0]);
  }

  function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy';
  }


  $(function() {
    var ps = get_passphrase_struct();
    if(ps == null) {
        alert("You need to enter your passphrase first.");
        window.location.replace("enterpassphrase");
    }
    else {
      // Setup the dnd listeners.
      var dropZone = document.getElementById('drop_zone');
      dropZone.addEventListener('dragover', handleDragOver, false);
      dropZone.addEventListener('drop', handleFileSelect, false);
      $('select[name^="keys"] option[value="' + ps.identity + '"]').attr("selected","selected");
      $('#keys').dropdown();
    }
  });
</script>
